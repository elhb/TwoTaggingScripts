#! /usr/bin/env python

import matplotlib
import sys

try:
    folder = sys.argv[1]
    plateid = sys.argv[2]
except IndexError:
    print 'Usage: makeGraphs <folder> <plateid>'

stats_file      = open(folder+'/'+plateid+'.stats.tsv')
goodcombos_file = open(folder+'/'+plateid+'.combos.tsv')
badcombos_file  = open(folder+'/'+plateid+'.badcombos.tsv')
mmscombos_file  = open(folder+'/'+plateid+'.mmscombos.tsv')
length_file     = open(folder+'/'+plateid+'.effective_lengths.tsv')

directions = {}
statistics = {}
combos = {}

goodcombos = {}
for line in goodcombos_file:
    if line[0] != '#':
        tmp = line.rstrip().split('\t')
        goodcombos[tmp[0]] = int(tmp[1])

badcombos = {}
for line in badcombos_file:
    if line[0] != '#':
        tmp = line.rstrip().split('\t')
        badcombos[tmp[0]+'_'+tmp[1]] = int(tmp[2])

mmscombos = {}
for line in mmscombos_file:
    if line[0] != '#':
        tmp = line.rstrip().split('\t')
        mmscombos[tmp[0]+'_'+tmp[1]] = int(tmp[2])

length = {}
for line in length_file:
    if line[0] != '#':
        tmp = line.rstrip().split('\t')
        length[int(tmp[0])] = int(tmp[1])

wells = []
for row in ['A','B','C','D','E','F','G','H']:
    for column in range(1,13):wells.append(row+ str(column))
for well in wells:
    if well not in goodcombos: goodcombos[well] = 0

line = stats_file.readline() #header
while line.rstrip() != '#some stats:':
    line = stats_file.readline()
    tmp=line.split('\t')
    try: directions[tmp[0].rstrip()]=tmp[1].rstrip()
    except IndexError: pass
while line.rstrip() != '':
    line = stats_file.readline()
    tmp=line.split('\t')
    try: statistics[tmp[1].rstrip()]=tmp[0].rstrip()
    except IndexError: pass

from pylab import *

print 'make length dist'
x = []
y = []
import operator
for key,value in sorted(length.iteritems(), key=operator.itemgetter(0))[::-1]:
    x.append(int(key))
    y.append(int(value))
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rc
fig = plt.figure(figsize=(20, 15), dpi=100)
ax = fig.add_subplot(111)
ax.set_title(plateid+'.effectivelengths')
ax.plot(x, y, '-b', label = 'Read length dist')
lines, labels   = ax.get_legend_handles_labels()
ax.grid(b=True, which='both')
ax.set_xlabel('Read length')
ax.set_ylabel('Number of reads')
savename = folder+'/'+plateid+'.effectivelengths.pdf'
plt.savefig(savename,bbox_inches='tight')
plt.close()

print 'making pie 1'
# make a square figure and axes
fig1 = figure(1, figsize=(15,15))
fig1.ax = axes([0.1, 0.1, 0.8, 0.8])
# The slices will be ordered and plotted counter-clockwise.
total = statistics['total pairs']
labels = []
values = []
fracs = []
for key, value in statistics.iteritems():
    if key == 'total pairs': continue
    if key == 'pairs with both primers found': continue
    labels.append(key)
    values.append(int(value))
for value in values:
    fracs.append(round(100*float(value)/float(total),2))
explode=[0 for label in labels]
pie(fracs, explode=explode, labels=labels, autopct='%1.1f%%', shadow=False, startangle=90)
title('Plate '+plateid+' total number of read pairs: '+str(total), bbox={'facecolor':'0.8', 'pad':5})
savename = folder+'/'+plateid+'.readPairsPieChart.pdf'
fig1.savefig(savename,bbox_inches='tight')
fig1.clear()

print 'making pie 2'
fig2 = figure(1, figsize=(15,15))
fig2.ax = axes([0.1, 0.1, 0.8, 0.8])
total = sum([int(value) for value in directions.values()])
labels = []
values = []
fracs = []
for key, value in directions.iteritems():
    labels.append(key)
    values.append(int(value))
for value in values:
    fracs.append(round(100*float(value)/float(total),2))
explode=[0 for label in labels]
pie(fracs, explode=explode, labels=labels, autopct='%1.1f%%', shadow=False, startangle=90)
title('Plate '+plateid+' total number of read pairs: '+str(total), bbox={'facecolor':'0.8', 'pad':5})
savename = folder+'/'+plateid+'.ampliconDirectionsPieChart.pdf'
fig2.savefig(savename,bbox_inches='tight')
fig2.clear()

print 'making bar 1'
import numpy as np
import matplotlib.pyplot as plt
labels = []
values = []
import operator
for label,value in sorted(goodcombos.iteritems(), key=operator.itemgetter(1))[::-1]:
    labels.append(label)
    values.append(value)
N = len(values)
ind = np.arange(N)  # the x locations for the groups
width = 1
fig, ax = plt.subplots()
fig.set_figwidth(len(values)/2)
rects1 = ax.bar(ind, values, width, color='r')
ax.set_title('Plate '+plateid+' Good combos')
ax.set_xticks(ind+width/float(2))
ax.set_xticklabels( labels )
ax.grid(b=True, which='both')
savename = folder+'/'+plateid+'.goodCombos.pdf'
fig.autofmt_xdate()
plt.savefig(savename,bbox_inches='tight')

print 'making bar 2'
labels = []
values = []
for label,value in sorted(badcombos.iteritems(), key=operator.itemgetter(1))[::-1]:
    labels.append(label)
    values.append(value)
N = len(values)
ind = np.arange(N)  # the x locations for the groups
width = 1
fig, ax = plt.subplots()
fig.set_figwidth(len(values)/2)
rects1 = ax.bar(ind, values, width, color='r')
ax.set_title('Plate '+plateid+' Bad combos')
ax.set_xticks(ind+width/float(2))
ax.set_xticklabels( labels )
ax.grid(b=True, which='both')
savename = folder+'/'+plateid+'.badCombos.pdf'
fig.autofmt_xdate()
plt.savefig(savename,bbox_inches='tight')

print 'making bar 3'
labels = []
values = []
for label,value in sorted(mmscombos.iteritems(), key=operator.itemgetter(1))[::-1]:
    labels.append(label)
    values.append(value)
N = len(values)
ind = np.arange(N)  # the x locations for the groups
width = 1
fig, ax = plt.subplots()
fig.set_figwidth(len(values)/2)
rects1 = ax.bar(ind, values, width, color='r')
ax.set_title('Plate '+plateid+' missmatch combos')
ax.set_xticks(ind+width/float(2))
ax.set_xticklabels( labels )
ax.grid(b=True, which='both')
savename = folder+'/'+plateid+'.mmsCombos.pdf'
fig.autofmt_xdate()
plt.savefig(savename,bbox_inches='tight')